package main

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"strings"
)

type pair struct {
	FnName   string
	RealName string
}

var (
	tab      = "    "
	fieldMap = []pair{} // fieldMap maps functionNames to string names
)

func usage() {
	fmt.Println("This script turns Serializers into python definitions")
	fmt.Println("Usage:\n\t./pan_generate [controller prefix] [myfile.cpp]")
	fmt.Println("Examples:")
	fmt.Println("\t./pan_generate prop PropulsionSystem.cpp")
	fmt.Println("\t./pan_generate dcdc ~/FlightSoftware/src/fsw/FCCode/DCDCController.cpp")
	os.Exit(1)
}

// generate the getter and setters in the class definition
func printDefs() {
	for _, pair := range fieldMap {
		fmt.Printf("\n@property\ndef %s(self):\n%sreturn str(self.read_state(%s))\n", pair.FnName, tab, pair.RealName)
		fmt.Printf("\n@%s.setter\ndef %s(self, val):\n%sself.write_state(%s, str(val))\n", pair.FnName, pair.FnName, tab, pair.RealName)
	}
}

// generate the print class function
// print(f"[TESTCASE] Tank 1 temperature: {self.temp1}")
func printObject() {
	fmt.Printf("\ndef print_object(self):\n")
	for _, pair := range fieldMap {
		fmt.Printf("%sprint(f\"[TESTCASE] %s: {self.%s}\")\n", tab, pair.FnName, pair.FnName)
	}
}

func main() {
	if len(os.Args) != 3 {
		usage()
	}

	file, err := os.Open(os.Args[2])

	if err != nil {
		os.Exit(1)
	}

	defer file.Close()
	scanner := bufio.NewScanner(file)
	regexString := `"` + os.Args[1] + `\.(\S+)"`
	var definesRegexp *regexp.Regexp = regexp.MustCompile(regexString)
	for scanner.Scan() {
		res := definesRegexp.FindStringSubmatch(scanner.Text())
		if res != nil {
			fnName := strings.ReplaceAll(res[1], ".", "_")
			fieldMap = append(fieldMap, pair{fnName, res[0]})
		}
	}
	// generate class body
	fmt.Printf("\n# This section is autogenerated by %s %s %s\n", os.Args[0], os.Args[1], os.Args[2])
	printDefs()
	printObject()
	fmt.Printf("\n# End autogenerated section\n")
}
