
# This section is autogenerated by ./pan_generate gomspace /Users/athena/FlightSoftware/src/fsw/FCCode/GomspaceController.cpp

@property
def rd(self):
    return str(self.read_state("gomspace_rd"))

@rd.setter
def rd(self, val):
    self.write_state("gomspace_rd", str(val))

@property
def get_hk(self):
    return str(self.read_state("gomspace.get_hk"))

@get_hk.setter
def get_hk(self, val):
    self.write_state("gomspace.get_hk", str(val))

@property
def low_batt(self):
    return str(self.read_state("gomspace.low_batt"))

@low_batt.setter
def low_batt(self, val):
    self.write_state("gomspace.low_batt", str(val))

@property
def batt_threshold(self):
    return str(self.read_state("gomspace.batt_threshold"))

@batt_threshold.setter
def batt_threshold(self, val):
    self.write_state("gomspace.batt_threshold", str(val))

@property
def vboost_output1(self):
    return str(self.read_state("gomspace.vboost.output1"))

@vboost_output1.setter
def vboost_output1(self, val):
    self.write_state("gomspace.vboost.output1", str(val))

@property
def vboost_output2(self):
    return str(self.read_state("gomspace.vboost.output2"))

@vboost_output2.setter
def vboost_output2(self, val):
    self.write_state("gomspace.vboost.output2", str(val))

@property
def vboost_output3(self):
    return str(self.read_state("gomspace.vboost.output3"))

@vboost_output3.setter
def vboost_output3(self, val):
    self.write_state("gomspace.vboost.output3", str(val))

@property
def vbatt(self):
    return str(self.read_state("gomspace.vbatt"))

@vbatt.setter
def vbatt(self, val):
    self.write_state("gomspace.vbatt", str(val))

@property
def curin_output1(self):
    return str(self.read_state("gomspace.curin.output1"))

@curin_output1.setter
def curin_output1(self, val):
    self.write_state("gomspace.curin.output1", str(val))

@property
def curin_output2(self):
    return str(self.read_state("gomspace.curin.output2"))

@curin_output2.setter
def curin_output2(self, val):
    self.write_state("gomspace.curin.output2", str(val))

@property
def curin_output3(self):
    return str(self.read_state("gomspace.curin.output3"))

@curin_output3.setter
def curin_output3(self, val):
    self.write_state("gomspace.curin.output3", str(val))

@property
def cursun(self):
    return str(self.read_state("gomspace.cursun"))

@cursun.setter
def cursun(self, val):
    self.write_state("gomspace.cursun", str(val))

@property
def cursys(self):
    return str(self.read_state("gomspace.cursys"))

@cursys.setter
def cursys(self, val):
    self.write_state("gomspace.cursys", str(val))

@property
def curout_output1(self):
    return str(self.read_state("gomspace.curout.output1"))

@curout_output1.setter
def curout_output1(self, val):
    self.write_state("gomspace.curout.output1", str(val))

@property
def curout_output2(self):
    return str(self.read_state("gomspace.curout.output2"))

@curout_output2.setter
def curout_output2(self, val):
    self.write_state("gomspace.curout.output2", str(val))

@property
def curout_output3(self):
    return str(self.read_state("gomspace.curout.output3"))

@curout_output3.setter
def curout_output3(self, val):
    self.write_state("gomspace.curout.output3", str(val))

@property
def curout_output4(self):
    return str(self.read_state("gomspace.curout.output4"))

@curout_output4.setter
def curout_output4(self, val):
    self.write_state("gomspace.curout.output4", str(val))

@property
def curout_output5(self):
    return str(self.read_state("gomspace.curout.output5"))

@curout_output5.setter
def curout_output5(self, val):
    self.write_state("gomspace.curout.output5", str(val))

@property
def curout_output6(self):
    return str(self.read_state("gomspace.curout.output6"))

@curout_output6.setter
def curout_output6(self, val):
    self.write_state("gomspace.curout.output6", str(val))

@property
def output_output1(self):
    return str(self.read_state("gomspace.output.output1"))

@output_output1.setter
def output_output1(self, val):
    self.write_state("gomspace.output.output1", str(val))

@property
def output_output2(self):
    return str(self.read_state("gomspace.output.output2"))

@output_output2.setter
def output_output2(self, val):
    self.write_state("gomspace.output.output2", str(val))

@property
def output_output3(self):
    return str(self.read_state("gomspace.output.output3"))

@output_output3.setter
def output_output3(self, val):
    self.write_state("gomspace.output.output3", str(val))

@property
def output_output4(self):
    return str(self.read_state("gomspace.output.output4"))

@output_output4.setter
def output_output4(self, val):
    self.write_state("gomspace.output.output4", str(val))

@property
def output_output5(self):
    return str(self.read_state("gomspace.output.output5"))

@output_output5.setter
def output_output5(self, val):
    self.write_state("gomspace.output.output5", str(val))

@property
def output_output6(self):
    return str(self.read_state("gomspace.output.output6"))

@output_output6.setter
def output_output6(self, val):
    self.write_state("gomspace.output.output6", str(val))

@property
def wdt_i2c_time_left(self):
    return str(self.read_state("gomspace.wdt_i2c_time_left"))

@wdt_i2c_time_left.setter
def wdt_i2c_time_left(self, val):
    self.write_state("gomspace.wdt_i2c_time_left", str(val))

@property
def counter_wdt_i2c(self):
    return str(self.read_state("gomspace.counter_wdt_i2c"))

@counter_wdt_i2c.setter
def counter_wdt_i2c(self, val):
    self.write_state("gomspace.counter_wdt_i2c", str(val))

@property
def counter_boot(self):
    return str(self.read_state("gomspace.counter_boot"))

@counter_boot.setter
def counter_boot(self, val):
    self.write_state("gomspace.counter_boot", str(val))

@property
def temp_output1(self):
    return str(self.read_state("gomspace.temp.output1"))

@temp_output1.setter
def temp_output1(self, val):
    self.write_state("gomspace.temp.output1", str(val))

@property
def temp_output2(self):
    return str(self.read_state("gomspace.temp.output2"))

@temp_output2.setter
def temp_output2(self, val):
    self.write_state("gomspace.temp.output2", str(val))

@property
def temp_output3(self):
    return str(self.read_state("gomspace.temp.output3"))

@temp_output3.setter
def temp_output3(self, val):
    self.write_state("gomspace.temp.output3", str(val))

@property
def temp_output4(self):
    return str(self.read_state("gomspace.temp.output4"))

@temp_output4.setter
def temp_output4(self, val):
    self.write_state("gomspace.temp.output4", str(val))

@property
def bootcause(self):
    return str(self.read_state("gomspace.bootcause"))

@bootcause.setter
def bootcause(self, val):
    self.write_state("gomspace.bootcause", str(val))

@property
def battmode(self):
    return str(self.read_state("gomspace.battmode"))

@battmode.setter
def battmode(self, val):
    self.write_state("gomspace.battmode", str(val))

@property
def pptmode(self):
    return str(self.read_state("gomspace.pptmode"))

@pptmode.setter
def pptmode(self, val):
    self.write_state("gomspace.pptmode", str(val))

@property
def heater(self):
    return str(self.read_state("gomspace.heater"))

@heater.setter
def heater(self, val):
    self.write_state("gomspace.heater", str(val))

@property
def power_cycle_output1_cmd(self):
    return str(self.read_state("gomspace.power_cycle_output1_cmd"))

@power_cycle_output1_cmd.setter
def power_cycle_output1_cmd(self, val):
    self.write_state("gomspace.power_cycle_output1_cmd", str(val))

@property
def power_cycle_output2_cmd(self):
    return str(self.read_state("gomspace.power_cycle_output2_cmd"))

@power_cycle_output2_cmd.setter
def power_cycle_output2_cmd(self, val):
    self.write_state("gomspace.power_cycle_output2_cmd", str(val))

@property
def power_cycle_output3_cmd(self):
    return str(self.read_state("gomspace.power_cycle_output3_cmd"))

@power_cycle_output3_cmd.setter
def power_cycle_output3_cmd(self, val):
    self.write_state("gomspace.power_cycle_output3_cmd", str(val))

@property
def power_cycle_output4_cmd(self):
    return str(self.read_state("gomspace.power_cycle_output4_cmd"))

@power_cycle_output4_cmd.setter
def power_cycle_output4_cmd(self, val):
    self.write_state("gomspace.power_cycle_output4_cmd", str(val))

@property
def power_cycle_output5_cmd(self):
    return str(self.read_state("gomspace.power_cycle_output5_cmd"))

@power_cycle_output5_cmd.setter
def power_cycle_output5_cmd(self, val):
    self.write_state("gomspace.power_cycle_output5_cmd", str(val))

@property
def power_cycle_output6_cmd(self):
    return str(self.read_state("gomspace.power_cycle_output6_cmd"))

@power_cycle_output6_cmd.setter
def power_cycle_output6_cmd(self, val):
    self.write_state("gomspace.power_cycle_output6_cmd", str(val))

@property
def pv1_cmd(self):
    return str(self.read_state("gomspace.pv1_cmd"))

@pv1_cmd.setter
def pv1_cmd(self, val):
    self.write_state("gomspace.pv1_cmd", str(val))

@property
def pv2_cmd(self):
    return str(self.read_state("gomspace.pv2_cmd"))

@pv2_cmd.setter
def pv2_cmd(self, val):
    self.write_state("gomspace.pv2_cmd", str(val))

@property
def pv3_cmd(self):
    return str(self.read_state("gomspace.pv3_cmd"))

@pv3_cmd.setter
def pv3_cmd(self, val):
    self.write_state("gomspace.pv3_cmd", str(val))

@property
def pptmode_cmd(self):
    return str(self.read_state("gomspace.pptmode_cmd"))

@pptmode_cmd.setter
def pptmode_cmd(self, val):
    self.write_state("gomspace.pptmode_cmd", str(val))

@property
def heater_cmd(self):
    return str(self.read_state("gomspace.heater_cmd"))

@heater_cmd.setter
def heater_cmd(self, val):
    self.write_state("gomspace.heater_cmd", str(val))

@property
def counter_reset_cmd(self):
    return str(self.read_state("gomspace.counter_reset_cmd"))

@counter_reset_cmd.setter
def counter_reset_cmd(self, val):
    self.write_state("gomspace.counter_reset_cmd", str(val))

@property
def gs_reset_cmd(self):
    return str(self.read_state("gomspace.gs_reset_cmd"))

@gs_reset_cmd.setter
def gs_reset_cmd(self, val):
    self.write_state("gomspace.gs_reset_cmd", str(val))

@property
def gs_reboot_cmd(self):
    return str(self.read_state("gomspace.gs_reboot_cmd"))

@gs_reboot_cmd.setter
def gs_reboot_cmd(self, val):
    self.write_state("gomspace.gs_reboot_cmd", str(val))

def print_object(self):
    print(f"[TESTCASE] rd: {self.rd}")
    print(f"[TESTCASE] get_hk: {self.get_hk}")
    print(f"[TESTCASE] low_batt: {self.low_batt}")
    print(f"[TESTCASE] batt_threshold: {self.batt_threshold}")
    print(f"[TESTCASE] vboost_output1: {self.vboost_output1}")
    print(f"[TESTCASE] vboost_output2: {self.vboost_output2}")
    print(f"[TESTCASE] vboost_output3: {self.vboost_output3}")
    print(f"[TESTCASE] vbatt: {self.vbatt}")
    print(f"[TESTCASE] curin_output1: {self.curin_output1}")
    print(f"[TESTCASE] curin_output2: {self.curin_output2}")
    print(f"[TESTCASE] curin_output3: {self.curin_output3}")
    print(f"[TESTCASE] cursun: {self.cursun}")
    print(f"[TESTCASE] cursys: {self.cursys}")
    print(f"[TESTCASE] curout_output1: {self.curout_output1}")
    print(f"[TESTCASE] curout_output2: {self.curout_output2}")
    print(f"[TESTCASE] curout_output3: {self.curout_output3}")
    print(f"[TESTCASE] curout_output4: {self.curout_output4}")
    print(f"[TESTCASE] curout_output5: {self.curout_output5}")
    print(f"[TESTCASE] curout_output6: {self.curout_output6}")
    print(f"[TESTCASE] output_output1: {self.output_output1}")
    print(f"[TESTCASE] output_output2: {self.output_output2}")
    print(f"[TESTCASE] output_output3: {self.output_output3}")
    print(f"[TESTCASE] output_output4: {self.output_output4}")
    print(f"[TESTCASE] output_output5: {self.output_output5}")
    print(f"[TESTCASE] output_output6: {self.output_output6}")
    print(f"[TESTCASE] wdt_i2c_time_left: {self.wdt_i2c_time_left}")
    print(f"[TESTCASE] counter_wdt_i2c: {self.counter_wdt_i2c}")
    print(f"[TESTCASE] counter_boot: {self.counter_boot}")
    print(f"[TESTCASE] temp_output1: {self.temp_output1}")
    print(f"[TESTCASE] temp_output2: {self.temp_output2}")
    print(f"[TESTCASE] temp_output3: {self.temp_output3}")
    print(f"[TESTCASE] temp_output4: {self.temp_output4}")
    print(f"[TESTCASE] bootcause: {self.bootcause}")
    print(f"[TESTCASE] battmode: {self.battmode}")
    print(f"[TESTCASE] pptmode: {self.pptmode}")
    print(f"[TESTCASE] heater: {self.heater}")
    print(f"[TESTCASE] power_cycle_output1_cmd: {self.power_cycle_output1_cmd}")
    print(f"[TESTCASE] power_cycle_output2_cmd: {self.power_cycle_output2_cmd}")
    print(f"[TESTCASE] power_cycle_output3_cmd: {self.power_cycle_output3_cmd}")
    print(f"[TESTCASE] power_cycle_output4_cmd: {self.power_cycle_output4_cmd}")
    print(f"[TESTCASE] power_cycle_output5_cmd: {self.power_cycle_output5_cmd}")
    print(f"[TESTCASE] power_cycle_output6_cmd: {self.power_cycle_output6_cmd}")
    print(f"[TESTCASE] pv1_cmd: {self.pv1_cmd}")
    print(f"[TESTCASE] pv2_cmd: {self.pv2_cmd}")
    print(f"[TESTCASE] pv3_cmd: {self.pv3_cmd}")
    print(f"[TESTCASE] pptmode_cmd: {self.pptmode_cmd}")
    print(f"[TESTCASE] heater_cmd: {self.heater_cmd}")
    print(f"[TESTCASE] counter_reset_cmd: {self.counter_reset_cmd}")
    print(f"[TESTCASE] gs_reset_cmd: {self.gs_reset_cmd}")
    print(f"[TESTCASE] gs_reboot_cmd: {self.gs_reboot_cmd}")

# End autogenerated section
